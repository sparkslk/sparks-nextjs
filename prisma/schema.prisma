generator default {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String           @id @default(cuid())
  email                 String?          @unique
  name                  String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  emailVerified         DateTime?
  image                 String?
  metadata              Json?
  password              String?
  role                  UserRole         @default(NORMAL_USER)
  accounts              Account[]
  receivedNotifications Notification[]   @relation("NotificationReceiver")
  sentNotifications     Notification[]   @relation("NotificationSender")
  managedOrganization   Organization?    @relation("OrganizationManager")
  parentGuardianRel     ParentGuardian[]
  patientProfile        Patient?
  sessions              Session[]
  therapistProfile      Therapist?
  blogs                 blogs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id         String      @id @default(cuid())
  name       String
  code       String      @unique
  address    String?
  phone      String?
  email      String?
  website    String?
  managerId  String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  manager    User?       @relation("OrganizationManager", fields: [managerId], references: [id])
  patients   Patient[]
  therapists Therapist[]
}

model Therapist {
  id              String           @id @default(cuid())
  userId          String           @unique
  licenseNumber   String           @unique
  specialization  String[]
  experience      Int?
  bio             String?
  availability    Json?
  organizationId  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rating          Decimal?         @db.Decimal(3, 2)
  assessments     Assessment[]
  Medication      Medication[]
  patients        Patient[]
  organization    Organization?    @relation(fields: [organizationId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  therapySessions TherapySession[]
  treatments      Treatment[]
  treatmentPlans  TreatmentPlan[]
}

model Patient {
  id                 String           @id @default(cuid())
  userId             String?          @unique
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  gender             Gender
  phone              String?
  email              String?
  address            String?
  emergencyContact   Json?
  medicalHistory     String?
  organizationId     String?
  primaryTherapistId String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  assessments        Assessment[]
  Medication         Medication[]
  parentGuardians    ParentGuardian[]
  organization       Organization?    @relation(fields: [organizationId], references: [id])
  primaryTherapist   Therapist?       @relation(fields: [primaryTherapistId], references: [id])
  user               User?            @relation(fields: [userId], references: [id])
  tasks              Task[]
  therapySessions    TherapySession[]
  treatments         Treatment[]
  treatmentPlans     TreatmentPlan[]
}

model ParentGuardian {
  id               String   @id @default(cuid())
  userId           String
  patientId        String
  relationship     String
  isPrimary        Boolean  @default(false)
  canMakeDecisions Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, patientId])
}

model TherapySession {
  id                String            @id @default(cuid())
  patientId         String
  therapistId       String
  scheduledAt       DateTime
  duration          Int
  status            SessionStatus     @default(SCHEDULED)
  type              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  attendanceStatus  AttendanceStatus?
  overallProgress   ProgressLevel?
  patientEngagement EngagementLevel?
  riskAssessment    RiskLevel?
  primaryFocusAreas String[]
  sessionNotes      String?
  nextSessionGoals  String?
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model TreatmentPlan {
  id            String      @id @default(cuid())
  patientId     String
  therapistId   String
  title         String
  description   String
  goals         String[]
  startDate     DateTime
  targetEndDate DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  treatments    Treatment[]
  patient       Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist     Therapist   @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Treatment {
  id              String        @id @default(cuid())
  treatmentPlanId String
  patientId       String
  therapistId     String
  name            String
  description     String
  instructions    String?
  frequency       String?
  dosage          String?
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  patient         Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist       Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  treatmentPlan   TreatmentPlan @relation(fields: [treatmentPlanId], references: [id], onDelete: Cascade)
}

model Assessment {
  id              String         @id @default(cuid())
  patientId       String
  therapistId     String
  type            AssessmentType
  title           String
  description     String?
  questions       Json
  responses       Json?
  score           Float?
  interpretation  String?
  recommendations String?
  assessmentDate  DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  patient         Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist       Therapist      @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Task {
  id               String     @id @default(cuid())
  patientId        String
  title            String
  description      String?
  instructions     String?
  dueDate          DateTime?
  status           TaskStatus @default(PENDING)
  priority         Int        @default(1)
  isRecurring      Boolean    @default(false)
  recurringPattern String?
  completedAt      DateTime?
  completionNotes  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  sessionid        String?
  patient          Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String           @id @default(cuid())
  senderId     String?
  receiverId   String
  type         NotificationType
  title        String
  message      String
  isRead       Boolean          @default(false)
  isUrgent     Boolean          @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  receiver     User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender       User?            @relation("NotificationSender", fields: [senderId], references: [id])
}

model JournalEntry {
  id        String   @id @default(cuid())
  patientId String?
  content   String
  mood      Int?
  tags      String[]
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id              String              @id
  patientId       String
  therapistId     String
  name            String
  dosage          String
  frequency       MedicationFrequency
  customFrequency String?
  instructions    String?
  mealTiming      MealTiming          @default(NONE)
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean             @default(true)
  isDiscontinued  Boolean             @default(false)
  discontinuedAt  DateTime?
  discontinuedBy  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime
  Patient         Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Therapist       Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  history         MedicationHistory[]

  @@index([isActive])
  @@index([isDiscontinued])
  @@index([patientId])
  @@index([therapistId])
}

model MedicationHistory {
  id             String                  @id @default(cuid())
  medicationId   String
  action         MedicationHistoryAction
  changedBy      String
  changedAt      DateTime                @default(now())
  previousValues Json?
  newValues      Json?
  reason         String?
  notes          String?
  medication     Medication              @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId])
  @@index([changedBy])
  @@index([changedAt])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model blogs {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  summary      String
  content      String
  therapist_id String
  status       String    @default("draft") @db.VarChar(20)
  category     String?   @db.VarChar(50)
  tags         String[]
  image_data   Bytes?
  image_type   String?   @db.VarChar(50)
  image_name   String?   @db.VarChar(255)
  views        Int       @default(0)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  published_at DateTime? @db.Timestamptz(6)
  User         User      @relation(fields: [therapist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRole {
  NORMAL_USER
  PARENT_GUARDIAN
  THERAPIST
  MANAGER
  ADMIN
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
  REQUESTED
  APPROVED
  DECLINED
}

enum AttendanceStatus {
  PRESENT
  LATE
  NO_SHOW
  CANCELLED
}

enum ProgressLevel {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CONCERNING
}

enum EngagementLevel {
  HIGH
  MEDIUM
  LOW
  RESISTANT
}

enum RiskLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum AssessmentType {
  INITIAL
  PROGRESS
  FINAL
  FOLLOW_UP
}

enum NotificationType {
  APPOINTMENT
  REMINDER
  TASK
  SYSTEM
  EMERGENCY
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MealTiming {
  NONE
  BEFORE_MEALS
  WITH_MEALS
  AFTER_MEALS
  ON_EMPTY_STOMACH
  WITH_FOOD
}

enum MedicationFrequency {
  ONCE_DAILY
  TWICE_DAILY
  THREE_TIMES_DAILY
  FOUR_TIMES_DAILY
  EVERY_OTHER_DAY
  WEEKLY
  AS_NEEDED
  CUSTOM
}

enum MedicationHistoryAction {
  CREATED
  UPDATED
  DISCONTINUED
  REACTIVATED
  DOSAGE_CHANGED
  FREQUENCY_CHANGED
  INSTRUCTIONS_UPDATED
}