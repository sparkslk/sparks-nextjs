generator default {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                               String              @id @default(cuid())
  email                            String?             @unique
  name                             String?
  createdAt                        DateTime            @default(now())
  updatedAt                        DateTime            @updatedAt
  emailVerified                    DateTime?
  image                            String?
  metadata                         Json?
  password                         String?
  role                             UserRole            @default(NORMAL_USER)
  accounts                         Account[]
  refundRequests                   CancelRefund[]      @relation("RefundRequests")
  processedRefunds                 CancelRefund[]      @relation("ProcessedRefunds")
  Conversation                     Conversation[]
  Donation                         Donation[]
  Game                             Game[]
  Message_Message_receiverIdToUser Message[]           @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]           @relation("Message_senderIdToUser")
  receivedNotifications            Notification[]      @relation("NotificationReceiver")
  sentNotifications                Notification[]      @relation("NotificationSender")
  managedOrganization              Organization?       @relation("OrganizationManager")
  parentGuardianRel                ParentGuardian[]
  patientProfile                   Patient?
  sessions                         Session[]
  SessionReschedule                SessionReschedule[]
  therapistProfile                 Therapist?
  blogs                            blogs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id         String      @id @default(cuid())
  name       String
  code       String      @unique
  address    String?
  phone      String?
  email      String?
  website    String?
  managerId  String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  manager    User?       @relation("OrganizationManager", fields: [managerId], references: [id])
  patients   Patient[]
  therapists Therapist[]
}

model Therapist {
  id                    String                       @id @default(cuid())
  userId                String                       @unique
  licenseNumber         String?                      @unique
  specialization        String[]
  experience            Int?
  bio                   String?
  availability          Json?
  organizationId        String?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  rating                Decimal?                     @db.Decimal(3, 2)
  session_rate          Decimal?                     @default(0) @db.Decimal(10, 2)
  Conversation          Conversation[]
  GameAssignment        GameAssignment[]
  Medication            Medication[]
  patients              Patient[]
  organization          Organization?                @relation(fields: [organizationId], references: [id])
  user                  User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentRequests    TherapistAssignmentRequest[] @relation("TherapistRequests")
  TherapistAvailability TherapistAvailability[]
  documents             TherapistDocument[]
  profile               TherapistProfile?
  references            TherapistReference?
  verification          TherapistVerification?
  therapySessions       TherapySession[]
  treatments            Treatment[]
  treatmentPlans        TreatmentPlan[]
}

model Patient {
  id                     String                       @id @default(cuid())
  userId                 String?                      @unique
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  gender                 Gender
  phone                  String?
  email                  String?
  address                String?
  emergencyContact       Json?
  medicalHistory         String?
  organizationId         String?
  primaryTherapistId     String?
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  parentConnectionStatus Boolean                      @default(true)
  Conversation           Conversation[]
  GameAssignment         GameAssignment[]
  GameSession            GameSession[]
  Medication             Medication[]
  parentGuardians        ParentGuardian[]
  organization           Organization?                @relation(fields: [organizationId], references: [id])
  primaryTherapist       Therapist?                   @relation(fields: [primaryTherapistId], references: [id])
  user                   User?                        @relation(fields: [userId], references: [id])
  payments               Payment[]
  tasks                  Task[]
  therapistRequests      TherapistAssignmentRequest[] @relation("PatientRequests")
  therapySessions        TherapySession[]
  treatments             Treatment[]
  treatmentPlans         TreatmentPlan[]
}

model ParentGuardian {
  id               String   @id @default(cuid())
  userId           String
  patientId        String
  relationship     String
  isPrimary        Boolean  @default(false)
  canMakeDecisions Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  contact_no       String?  @db.VarChar(15)
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, patientId])
}

model TherapySession {
  id                String              @id @default(cuid())
  patientId         String
  therapistId       String
  scheduledAt       DateTime
  duration          Int
  status            SessionStatus       @default(SCHEDULED)
  type              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  attendanceStatus  AttendanceStatus?
  bookedRate        Decimal?            @db.Decimal(10, 2)
  nextSessionGoals  String?
  overallProgress   ProgressLevel?
  patientEngagement EngagementLevel?
  primaryFocusAreas String[]
  riskAssessment    RiskLevel?
  sessionNotes      String?
  calendarEventId   String?
  meetingLink       String?
  sessionType       SessionType         @default(IN_PERSON)
  cancelRefund      CancelRefund?
  Payment           Payment[]
  SessionReschedule SessionReschedule[]
  patient           Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model TreatmentPlan {
  id            String      @id @default(cuid())
  patientId     String
  therapistId   String
  title         String
  description   String
  goals         String[]
  startDate     DateTime
  targetEndDate DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  treatments    Treatment[]
  patient       Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist     Therapist   @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Treatment {
  id              String        @id @default(cuid())
  treatmentPlanId String
  patientId       String
  therapistId     String
  name            String
  description     String
  instructions    String?
  frequency       String?
  dosage          String?
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  patient         Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist       Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  treatmentPlan   TreatmentPlan @relation(fields: [treatmentPlanId], references: [id], onDelete: Cascade)
}

model Assessment {
  id          String  @id @default(cuid())
  type        String
  description String?
  name        String?
  link        String?
  image       String?
}

model Task {
  id               String     @id @default(cuid())
  patientId        String
  title            String
  description      String?
  instructions     String?
  dueDate          DateTime?
  status           TaskStatus @default(PENDING)
  priority         Int        @default(1)
  isRecurring      Boolean    @default(false)
  recurringPattern String?
  completedAt      DateTime?
  completionNotes  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  sessionid        String?
  patient          Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String           @id @default(cuid())
  senderId     String?
  receiverId   String
  type         NotificationType
  title        String
  message      String
  isRead       Boolean          @default(false)
  isUrgent     Boolean          @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  receiver     User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender       User?            @relation("NotificationSender", fields: [senderId], references: [id])
}

model JournalEntry {
  id        String   @id @default(cuid())
  patientId String?
  content   String
  mood      Int?
  tags      String[]
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id              String              @id
  patientId       String
  therapistId     String
  name            String
  dosage          String
  frequency       MedicationFrequency
  customFrequency String?
  instructions    String?
  mealTiming      MealTiming          @default(NONE)
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean             @default(true)
  isDiscontinued  Boolean             @default(false)
  discontinuedAt  DateTime?
  discontinuedBy  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
  Patient         Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Therapist       Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  history         MedicationHistory[]

  @@index([isActive])
  @@index([isDiscontinued])
  @@index([patientId])
  @@index([therapistId])
}

model MedicationHistory {
  id             String                  @id @default(cuid())
  medicationId   String
  action         MedicationHistoryAction
  changedBy      String
  changedAt      DateTime                @default(now())
  previousValues Json?
  newValues      Json?
  reason         String?
  notes          String?
  medication     Medication              @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId])
  @@index([changedBy])
  @@index([changedAt])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model blogs {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  summary      String
  content      String
  therapist_id String
  status       String    @default("draft") @db.VarChar(20)
  category     String?   @db.VarChar(50)
  tags         String[]
  image_data   Bytes?
  image_type   String?   @db.VarChar(50)
  image_name   String?   @db.VarChar(255)
  views        Int       @default(0)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  published_at DateTime? @db.Timestamptz(6)
  User         User      @relation(fields: [therapist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TherapistAssignmentRequest {
  id              String           @id @default(cuid())
  patientId       String
  therapistId     String
  status          AssignmentStatus @default(PENDING)
  requestMessage  String?
  responseMessage String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  patient         Patient          @relation("PatientRequests", fields: [patientId], references: [id], onDelete: Cascade)
  therapist       Therapist        @relation("TherapistRequests", fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([patientId, therapistId])
  @@index([status])
}

model QuizSubmission {
  id               String     @id @default(cuid())
  userId           String?
  sessionId        String
  responses        Json
  currentStep      Int        @default(1)
  completionStatus QuizStatus @default(IN_PROGRESS)
  startedAt        DateTime   @default(now())
  completedAt      DateTime?
  updatedAt        DateTime   @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([completionStatus])
}

model TherapistAvailability {
  id          String    @id @default(cuid())
  therapistId String
  date        DateTime
  startTime   String
  isBooked    Boolean   @default(false)
  isFree      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@index([therapistId, date])
  @@index([therapistId, date, isBooked])
}

model SessionReschedule {
  id                  String         @id @default(cuid())
  sessionId           String
  previousScheduledAt DateTime
  newScheduledAt      DateTime
  rescheduledAt       DateTime       @default(now())
  rescheduledBy       String
  rescheduledByRole   String
  rescheduleReason    String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  User                User           @relation(fields: [rescheduledBy], references: [id], onDelete: Cascade)
  TherapySession      TherapySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model CancelRefund {
  id                 String         @id @default(cuid())
  sessionId          String         @unique
  parentUserId       String
  originalAmount     Decimal        @db.Decimal(10, 2)
  refundAmount       Decimal        @db.Decimal(10, 2)
  refundPercentage   Decimal        @db.Decimal(5, 2)
  cancellationTime   DateTime
  sessionTime        DateTime
  hoursBeforeSession Decimal        @db.Decimal(5, 2)
  cancelReason       String?
  bankAccountName    String
  bankName           String
  accountNumber      String
  branchCode         String?
  swiftCode          String?
  refundStatus       RefundStatus   @default(PENDING)
  processedAt        DateTime?
  processedBy        String?
  adminNotes         String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())
  parentUser         User           @relation("RefundRequests", fields: [parentUserId], references: [id], onDelete: Cascade)
  processor          User?          @relation("ProcessedRefunds", fields: [processedBy], references: [id])
  session            TherapySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([parentUserId])
  @@index([refundStatus])
  @@index([createdAt])
}

model Payment {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  orderId           String          @unique
  paymentId         String?         @unique
  sessionId         String?
  patientId         String?
  amount            Decimal         @db.Decimal(10, 2)
  currency          String          @default("LKR")
  status            PaymentStatus   @default(PENDING)
  paymentMethod     String?
  statusMessage     String?
  payhereStatusCode String?
  cardHolderName    String?
  maskedCardNumber  String?
  cardExpiry        String?
  metadata          Json?
  createdAt         DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime?       @default(now()) @db.Timestamp(6)
  patient           Patient?        @relation(fields: [patientId], references: [id])
  TherapySession    TherapySession? @relation(fields: [sessionId], references: [id], map: "fk_payment_session")

  @@index([orderId], map: "idx_orderId")
  @@index([paymentId], map: "idx_paymentId")
  @@index([sessionId], map: "idx_sessionId")
  @@index([patientId], map: "idx_patientId")
  @@index([status], map: "idx_status")
}

model TherapistProfile {
  id                   String    @id @default(cuid())
  therapistId          String    @unique
  phone                String?
  houseNumber          String?
  streetName           String?
  city                 String?
  gender               Gender?
  dateOfBirth          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accountHolderName    String?
  accountNumber        String?
  bankName             String?
  branchName           String?
  profileCompleted     Boolean   @default(false)
  profileCompletedAt   DateTime?
  profileImage         Bytes?
  profileImageMimeType String?
  profileImageName     String?
  therapist            Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model TherapistVerification {
  id                     String             @id @default(cuid())
  therapistId            String             @unique
  status                 VerificationStatus @default(PENDING)
  licenseNumber          String?
  primarySpecialty       String?
  yearsOfExperience      String?
  highestEducation       String?
  institution            String?
  adhdExperience         String?
  backgroundCheckConsent Boolean            @default(false)
  termsAccepted          Boolean            @default(false)
  accurateInfoCertified  Boolean            @default(false)
  submittedAt            DateTime?
  reviewedAt             DateTime?
  reviewedBy             String?
  reviewNotes            String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  approvalAcknowledgedAt DateTime?
  therapist              Therapist          @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model TherapistDocument {
  id           String       @id @default(cuid())
  therapistId  String
  category     DocumentType
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  uploadedAt   DateTime     @default(now())
  fileData     Bytes
  therapist    Therapist    @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId, category])
}

model TherapistReference {
  id                 String          @id @default(cuid())
  therapistId        String          @unique
  firstName          String
  lastName           String
  professionalTitle  String
  phoneNumber        String
  email              String?
  contactedAt        DateTime?
  verificationStatus ReferenceStatus @default(PENDING)
  verificationNotes  String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  therapist          Therapist       @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Conversation {
  id              String           @id
  therapistId     String
  participantId   String
  participantType ConversationType
  patientId       String?
  lastMessageAt   DateTime         @default(now())
  createdAt       DateTime         @default(now())
  User            User             @relation(fields: [participantId], references: [id], onDelete: Cascade)
  Patient         Patient?         @relation(fields: [patientId], references: [id])
  Therapist       Therapist        @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  Message         Message[]

  @@unique([therapistId, participantId, participantType])
  @@index([participantId])
  @@index([therapistId])
}

model Donation {
  id                String                @id
  amount            Decimal               @db.Decimal(10, 2)
  currency          String                @default("LKR")
  frequency         DonationFrequency     @default(ONE_TIME)
  paymentMethod     String?
  paymentStatus     DonationPaymentStatus @default(PENDING)
  payHereOrderId    String?               @unique
  payHerePaymentId  String?               @unique
  payHereStatusCode String?
  donorName         String?
  donorEmail        String?
  donorPhone        String?
  isAnonymous       Boolean               @default(false)
  message           String?
  userId            String?
  receiptSent       Boolean               @default(false)
  receiptSentAt     DateTime?
  source            String?
  ipAddress         String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime
  User              User?                 @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([donorEmail])
  @@index([paymentStatus])
}

model Game {
  id              String           @id
  title           String
  description     String
  category        GameCategory
  embedUrl        String
  thumbnailUrl    String?
  iframeWidth     String           @default("100%")
  iframeHeight    String           @default("600px")
  allowFullscreen Boolean          @default(true)
  targetSkills    String[]
  ageRange        String
  difficulty      GameDifficulty
  estimatedTime   Int
  isActive        Boolean          @default(true)
  addedBy         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  User            User             @relation(fields: [addedBy], references: [id])
  GameAssignment  GameAssignment[]
  GameSession     GameSession[]

  @@index([category])
  @@index([isActive])
}

model GameAssignment {
  id             String               @id
  gameId         String
  patientId      String
  therapistId    String
  status         GameAssignmentStatus @default(ACTIVE)
  completedAt    DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime
  assignedAt     DateTime             @default(now())
  targetSessions Int
  therapistNotes String?
  Game           Game                 @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Patient        Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Therapist      Therapist            @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  GameSession    GameSession[]

  @@index([patientId])
  @@index([status])
  @@index([therapistId])
}

model GameSession {
  id             String          @id
  gameId         String
  patientId      String
  assignmentId   String?
  startedAt      DateTime        @default(now())
  endedAt        DateTime?
  duration       Int?
  gameData       Json?
  GameAssignment GameAssignment? @relation(fields: [assignmentId], references: [id])
  Game           Game            @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Patient        Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([patientId])
}

model Message {
  id                            String       @id
  conversationId                String
  senderId                      String
  receiverId                    String
  encryptedContent              String
  isRead                        Boolean      @default(false)
  readAt                        DateTime?
  createdAt                     DateTime     @default(now())
  Conversation                  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User_Message_receiverIdToUser User         @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser   User         @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([isRead])
  @@index([receiverId])
  @@index([senderId])
}

enum UserRole {
  NORMAL_USER
  PARENT_GUARDIAN
  THERAPIST
  MANAGER
  ADMIN
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
  APPROVED
  REQUESTED
}

enum AttendanceStatus {
  PRESENT
  LATE
  NO_SHOW
  CANCELLED
}

enum ProgressLevel {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CONCERNING
}

enum EngagementLevel {
  HIGH
  MEDIUM
  LOW
  RESISTANT
}

enum RiskLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum NotificationType {
  APPOINTMENT
  REMINDER
  TASK
  SYSTEM
  EMERGENCY
  PAYMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MealTiming {
  NONE
  BEFORE_MEALS
  WITH_MEALS
  AFTER_MEALS
  ON_EMPTY_STOMACH
  WITH_FOOD
}

enum MedicationFrequency {
  ONCE_DAILY
  TWICE_DAILY
  THREE_TIMES_DAILY
  FOUR_TIMES_DAILY
  EVERY_OTHER_DAY
  WEEKLY
  AS_NEEDED
  CUSTOM
}

enum MedicationHistoryAction {
  CREATED
  UPDATED
  DISCONTINUED
  REACTIVATED
  DOSAGE_CHANGED
  FREQUENCY_CHANGED
  INSTRUCTIONS_UPDATED
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum QuizStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  CHARGEDBACK
  UNKNOWN
}

enum VerificationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_RESUBMISSION
}

enum DocumentType {
  PROFESSIONAL_LICENSE
  EDUCATIONAL_CERTIFICATE
  ADDITIONAL_CERTIFICATION
}

enum ReferenceStatus {
  PENDING
  CONTACTED
  VERIFIED
  FAILED_VERIFICATION
}

enum AssessmentType {
  INITIAL
  PROGRESS
  FINAL
  FOLLOW_UP
}

enum ConversationType {
  PARENT
  PATIENT
}

enum DonationFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DonationPaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum GameAssignmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

enum GameCategory {
  ATTENTION_TRAINING
  MEMORY_EXERCISES
  IMPULSE_CONTROL
  EXECUTIVE_FUNCTION
  SOCIAL_SKILLS
  EMOTIONAL_REGULATION
  EDUCATIONAL
  RELAXATION
  OTHER
}

enum GameDifficulty {
  EASY
  MEDIUM
  HARD
  ADAPTIVE
}

enum SessionType {
  IN_PERSON
  ONLINE
  HYBRID
}
